#!/usr/bin/env python
import sys

import rospy

import std_msgs.msg
import geometry_msgs.msg
import sensor_msgs.msg
import std_srvs.srv

import ardrone_driver.msg
import ardrone_driver.srv

import ardrone

rospy.init_node('ardrone')

try:
    drone = ardrone.ARDrone(rospy.get_param('~host'))
except KeyError:
    drone = ardrone.ARDrone()

try:
    freq = ardrone.ARDrone(rospy.get_param('~freq'))
except KeyError:
    freq = 20 # Hz

navdata = rospy.Publisher('ardrone/navdata', ardrone_driver.msg.Navdata, queue_size=10)
image = rospy.Publisher('ardrone/image', sensor_msgs.msg.Image, queue_size=10)

def update_navdata(event):
    if 'demo' in drone.navdata:
        navdata.publish(ardrone_driver.msg.Navdata(**drone.navdata['demo']))
rospy.Timer(rospy.Duration(1.0/freq, update_navdata))

def update_image(event):
    image.publish(sensor_msgs.msg.Image(height=drone.image.height, width=drone.image.width, encoding="rgb8", step=drone.image.width*3, data=drone.image.tobytes()))
rospy.Timer(rospy.Duration(1.0/freq, update_image))

def send_command(twist):
    drone.move(-twist.linear.y, -twist.linear.x, twist.linear.z, -twist.angular.z)
rospy.Subscriber('ardrone/cmd_vel', geometry_msgs.msg.Twist, send_command)

def send_reset(req):
    drone.reset()
    return []
rospy.Service('ardrone/reset', std_srvs.srv.Empty, send_reset)

def send_land(req):
    drone.land()
    return []
rospy.Service('ardrone/land', std_srvs.srv.Empty, send_land)

def send_takeoff(req):
    drone.takeoff()
    return []
rospy.Service('ardrone/takeoff', std_srvs.srv.Empty, send_takeoff)

def send_trim(req):
    drone.trim()
    return []
rospy.Service('ardrone/trim', std_srvs.srv.Empty, send_trim)

def set_cam(req):
    drone.set_cam(req.cam)
    return []
rospy.Service('ardrone/setcam', ardrone_driver.srv.SetCam, set_cam)

rospy.spin()

drone.halt()
